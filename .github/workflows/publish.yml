name: Deploy

on:
  push:
    branches:
     - dev
     - master

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      uses: docker/login-action@v1
      with:
        registry: ${{ secrets.AWS_ACCOUNT_NUMBER }}.dkr.ecr.${{ secrets.AWS_REGION }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Cache Docker layers
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: ${{ runner.os }}-buildx-

    - name: Make docker image tag
      id: make-image-tag
      env:
        ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_NUMBER }}.dkr.ecr.${{ secrets.AWS_REGION }}
        IMAGE_TAG:  ${{ github.sha }}
      run: |
        if [[ $GITHUB_REF == 'refs/heads/dev' ]]; then
          export ECR_REPOSITORY=${{ secrets.AWS_ECR_DEV }}
        else
          export ECR_REPOSITORY=${{ secrets.AWS_ECR_PROD }}
        fi
        echo "::set-output name=NAME::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    - name: Build and push to AWS ECR
      uses: docker/build-push-action@v2
      with:
        push: true
        tags: ${{ steps.make-image-tag.outputs.NAME }}
        file: ./Dockerfile
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache

    - name: Replace image name in k8s configure
      run: perl -pi -e 's/ECR_IMAGE/"$ENV{IMAGE}"/' k8s/deployment.yaml
      env:
        IMAGE: ${{ steps.make-image-tag.outputs.NAME }}

    - name: Deploy
      run: |
        aws eks --region ${{ secrets.AWS_REGION }} update-kubeconfig --name ${{ secrets.AWS_CLUSTER }}
        kubectl apply -f ./k8s/deployment.yaml -f ./k8s/service.yaml
